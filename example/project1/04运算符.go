package project01

import "fmt"

/*
*
 */
func operator() {
	fmt.Printf("2<<3 === %d\n", 2<<3)
	//2=>10, 2 << 3 === 10000 ===> 16
	fmt.Printf("2>>3 === %d\n", 2>>3)
	//2=>10, 2 >> 3 === 0000 ===> 0

	fmt.Printf("2&3 === %d\n", 2&3)
	//2=>10, 3=>11, 2 & 3 === 2
	fmt.Printf("2|3 === %d\n", 2|3)
	//2=>10, 3=>11, 2 | 3 === 3
	fmt.Printf("2^3 === %d\n", 2^3)
	//2=>10, 3=>11, 2 ^ 3 === 1
	fmt.Printf("-3^3 === %d\n", -3^3)
	//3 ===> 0000 0011  反码 ===> 1111 1100  补码 ===> 1111 1101
	//-3 ===> 1111 1101
	//-3 ^ 3 === 1111 1101 ^ 0000 0011 === 1111 1110 ->除符号位全部取反-> 1000 0001 -> 结果+1 -> 1000 0010 -> -2
	fmt.Printf("-3 === %d\n", -3&^3)
	//按位清除运算符。&^ 运算符的作用是将第一个操作数中对应为 1 的位保留，而将第二个操作数中对应为 1 的位清除（即置为 0）

}
